openapi: 3.0.3
info:
  title: Web Service API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local
  - url: https://web-service.dev-internal.biz.id/api
    description: Development
tags:
  - name: Auth
    description: Authentication
  - name: Category
    description: Category
  - name: Courses
    description: Courses
  - name: Course Sections
    description: Course Sections
  - name: Course Section Contents
    description: Course Section Contents
paths:
  /register:
    post:
      tags:
        - Auth
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
  /login:
    post:
      tags:
        - Auth
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /category:
    get:
      tags:
        - Category
      summary: Get All Categories
      security: 
          - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseWithData"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
    post:
      tags:
        - Category
      summary: Create Category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequest"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse" 
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /category/{id}:
    put:
      tags:
        - Category
      summary: Update Category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: Category ID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UnauthorizedResponse"
    delete:
      tags:
        - Category
      summary: Delete Category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: Category ID
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /course:
    get:
      tags:
        - Courses
      summary: Get All Courses
      security: 
          - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseResponseWithData"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
    post:
      tags:
        - Courses
      summary: Create Course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /course/{id}:
    get:
      tags:
        - Courses
      summary: Get Course
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: Course ID
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseResponseWithData"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
    put:
      tags:
        - Courses
      summary: Update Course
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: Course ID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
    delete:
      tags:
        - Courses
      summary: Delete Course
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: Course ID
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /course-section/{course_id}:
    get:
      tags:
        - Course Sections
      summary: Get All Course Sections
      security: 
          - bearerAuth: []
      parameters:
        - name: course_id
          description: Course ID
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseSectionResponseWithData"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
    post:
      tags:
        - Course Sections
      summary: Create Course Section
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          description: Course ID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseSectionRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
    put:
      tags:
        - Course Sections
      summary: Update Course Section
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          description: Course ID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseSectionRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
    delete:
      tags:
        - Course Sections
      summary: Delete Course Section
      security:
        - bearerAuth: []
      parameters:
        - name: course_id
          description: Course ID
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /course-section-content/{section_id}:
    get:
      tags:
        - Course Section Contents
      summary: Get All Course Section Contents
      security: 
          - bearerAuth: []
      parameters:
        - name: section_id
          description: Section ID
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseSectionContentResponseWithData"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
    post:
      tags:
        - Course Section Contents
      summary: Create Course Section Content
      security:
        - bearerAuth: []
      parameters:
        - name: section_id
          description: Section ID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseSectionContentRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
        type: object
        properties:
          email:
            type: string
            format: email
          name:
            type: string
          password:
            type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Success"
        data:
          type: object
          properties:
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "M9tZD@example.com"
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNT"
    SuccessResponse:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Success"
    CourseResponseWithData:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Courses fetched successfully"
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                example: 1
              user_id:
                type: number
                example: 1
              category_id:
                type: number
                example: 1
              title:
                type: string
                example: "Course 1"
              image: 
                type: string
                example: "https://example.com/image.jpg"
              description: 
                type: string
                example: "Description of course 1"
              created_at:
                type: string
                example: "2021-01-01T00:00:00.000Z"
              updated_at:
                type: string
                example: "2021-01-01T00:00:00.000Z"
              user:
                type: object
                properties:
                  name: 
                    type: string 
                    example: "John Doe"
                  email:
                    type: string
                    example: "M9tZD@example.com"
              category:
                type: object
                properties:
                  name:
                    type: string
                    example: "Category 1"
    CourseRequest:
      type: object
      properties:
        category_id:
          type: number
          example: 1
        title:
          type: string
          example: "Course 1"
        description:
          type: string
          example: "Description of course 1"
        image:
          type: string
          example: "base64encodedimage"
    ValidationResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "Validation Error"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email is required"
    NotFoundResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "Not found"
    UnauthorizedResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "Unauthorized"
    CategoryResponseWithData:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Get All Categories Successfully"
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                example: 1
              name:
                type: string
                example: "Category 1"
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: "Category 1"
    CourseSectionResponseWithData:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Get All Course Sections Successfully"
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                example: 1
              course_id:
                type: number
                example: 1
              title:
                type: string
                example: "Section 1"
              description:
                type: string
                example: "Description of section 1"
              created_at:
                type: string
                example: "2021-01-01T00:00:00.000Z"
              updated_at:
                type: string
                example: "2021-01-01T00:00:00.000Z"
    CourseSectionRequest:
      type: object
      properties:
        title:
          type: string
          example: "Section 1"
        description:
          type: string
          example: "Description of section 1"
    CourseSectionContentResponseWithData:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "Get All Course Section Contents Successfully"
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                example: 1
              title:
                type: string
                example: "Content 1"
              description:
                type: string
                example: "Description of content 1"
              created_at:
                type: string
                example: "2021-01-01T00:00:00.000Z"
              updated_at:
                type: string
                example: "2021-01-01T00:00:00.000Z"
    CourseSectionContentRequest:
      type: object
      properties:
        title:
          type: string
          example: "Content 1"
        description:
          type: string
          example: "Description of content 1"